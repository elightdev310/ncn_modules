<?php
// $Id$

/*
$query = "";
$result = db_query($query);
$row_count = mysql_num_rows($result);
$row = mysql_fetch_assoc($result);

mysql_real_escape_string
mysql_insert_id();
*/

require_once('ncn_auto_payments.inc');
require_once('ncn_auto_payments.admin.inc');

function ncn_auto_payments_menu() {
	$items['payment/process'] = array(
	  'page callback' => 'ncn_auto_payments_process',
	  'type' => MENU_CALLBACK,
	  'access arguments' => array('access content'),
	);
	
	$items['payment/run_cron'] = array(
        'page callback' => 'ncn_auto_payments_cron',
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );
	
	$items['assign/member_role'] = array(
	  'page callback' => 'ncn_auto_assign_member_role',
	  'type' => MENU_CALLBACK,
	  'access arguments' => array('access content'),
	);
	
	$items['admin/config/ncn_admin/declined_report'] = array(
		'title' => 'Credit Card Declined Report',
    'page callback' => 'ncn_auto_payments_declined_report',
    'access arguments' => array('CC Declined Report'),
		'type' => MENU_LOCAL_TASK,
    'weight' => 3,
	);
	
	$items['cc_declined/charge/%'] = array(
		'page callback' => 'ncn_auto_payments_charge_again_handler',
		'page arguments' => array(2), 
	  'type' => MENU_CALLBACK,
	  'access arguments' => array('CC Declined Report'),
	);
	$items['cc_declined/delete/%'] = array(
		'page callback' => 'ncn_auto_payments_cc_declined_delete_handler',
		'page arguments' => array(2), 
	  'type' => MENU_CALLBACK,
	  'access arguments' => array('CC Declined Report'),
	);
	
		
	return $items;
}

function ncn_auto_payments_permission() {
	return array(
		'CC Declined Report' => array(
		  'title' => t('CC Declined Report'),
		));
}

//http://www.netclaimsnow.com/payment/process?uid=&pid=
function ncn_auto_payments_process() {
    if(!empty($_REQUEST['uid']))
    {
        $uid = $_REQUEST['uid'];
        $product_id = $_REQUEST['pid'];
        $_user = user_load($uid);

        $pid = 0;	// Payment Transaction ID
        make_monthly_payment($_user, $product_id, $pid);

        $node = node_load($product_id);
        $node->data = unserialize($node->data);

        echo "user($uid): ".$_user->name ."\n";
        echo "product($product_id): ".$node->sell_price ."\n";
    }
}

function ncn_auto_assign_member_role() {
	$query = "SELECT * FROM users WHERE uid != 0 AND uid != 1";
	$result = db_query($query);
	$count = $result->rowCount();
	for ($i=0; $i<$count; $i++) {
		$row = $result->fetchAssoc();
		$uid = $row['uid'];
		$query1 = "SELECT * FROM users_roles WHERE uid=$uid";
		$result1 = db_query($query1);
		$count1 = $result1->rowCount();
		if ($count1 == 0) {
			$query2 = "INSERT INTO users_roles(uid, rid) VALUES($uid, 8)";
			$result2 = db_query($query2);
			echo ($row['name']."<br/>");
		}
	}
}

//------------------------------------------------------------------------------
// used to notify admin of any monthly payments that failed
function ncn_auto_payments_mail($key, &$message, $params)
{
GLOBAL $auto_payment_messages;

	$language = $message['language'];
	$variables = user_mail_tokens($params['account'], $language);

	switch ($key)
	{
		case 'message':
		  $message['subject'] = t('Automated Payment Watchdog', $params, $language->language);
		  $message['body'][] = $auto_payment_messages;
			break;
		case 'credit_card_declined':
		case 'credit_card_expired':
			$headers = array(
				'MIME-Version' => '1.0',
				'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
				'Content-Transfer-Encoding' => '8Bit',
				'X-Mailer' => 'Drupal'
			);
			foreach ($headers as $key => $value) {
				$message['headers'][$key] = $value;
			}
			$message['subject'] = $params['subject'];
			$message['body'][] = $params['body'];
			
			$bcc = "rayjakes@idesolutions.co.uk";
			$site_mail = variable_get('site_mail', '');
			if ($site_mail != "") {
				$bcc .= ", $site_mail";
			}
			
			//$bcc .= ", elight.haha@gmail.com";
			$message['headers']['Bcc'] = $bcc;
			
			break;
			
	}
}

//------------------------------------------------------------------------------
function ncn_auto_payments_cron()
{
	watchdog('cron_log', date('D, d M Y H:i:s'));
	GLOBAL $auto_payment_messages;
	
	$query = "SELECT * FROM users";
	$result = db_query($query);
	$row_count = $result->rowCount();
	
	//for ($i=0; $i<$row_count; $i++)
    foreach($result as $row)
	{
		//$row = $result->fetchAssoc();
        $row = (array)$row;
		
		// Except for Gilbert
		if ($row['uid'] == 71 || $row['uid'] == 74 || $row['uid'] == 77 || $row['uid'] == 78) {
			continue;
		}
		
		$user = user_load($row['uid']);
	
		// check if this member is silver
		$member_type = get_member_type($user);	
		
		// only for normal users (not distributors or account managers/admin/etc)
		if ( (isset($user->profile_memberid)) && ($user->profile_memberid != '') )
		{
			// check member id is good and get last date
			$query2 = db_query("SELECT * FROM member_id_pool WHERE member_id=:a AND used=:b",array(":a"=>$user->profile_memberid,":b"=>1));
			$result2 = $query2;
			$row_count2 = $result2->rowCount();
			
			if ($row_count2 > 0)
			{
				$row2 = $result2->fetchAssoc();
				$next_payment_date = $row2['next_payment_date'];
				
				$create_time = $row2['create'];
				if ($create_time == 0) {
					$create_time = $row['created'];
				}
				
				// check for payment never made
				if ($next_payment_date == 0)
				{
					$next_payment_date = calculate_next_month($create_time, ncn_user_get_member_renewal_day($user->profile_memberid));
					
					$query2 = db_query("UPDATE member_id_pool SET next_payment_date=".$next_payment_date." WHERE member_id=:a",array(":a"=>$user->profile_memberid));
					$result2 = $query2;
				}
				
				/*if($_SERVER['REMOTE_ADDR']=='103.240.34.101')
				{
					echo date("Y-m-d H:i A T",$next_payment_date)." <= ".date("Y-m-d H:i A T :: ");
					echo " => ".$next_payment_date." <= ".date('U');
					echo " => ".$product_nid." => ".$pid;
					exit;
				}*/
				
				// do we need to pay yet?
				if ($next_payment_date <= date('U') )
				{
//					echo "pay on: ";
//					echo date("m/d/Y", $next_payment_date);
//					echo "<br>";
					
					// calculate the next payment date (FROM CREATION DATE)
					$new_next_payment_date = calculate_next_month($next_payment_date, ncn_user_get_member_renewal_day($user->profile_memberid));
					
					// singup monthly fee for 3 months
					$query2 = db_query("SELECT * FROM member_id_pool WHERE member_id=:a",array(":a"=>$user->profile_memberid));
					$result2 = $query2;
					if ($result2->rowCount() > 0 ) {
						$member = $result2->fetchAssoc();
						$months = $member['signup_fee_type'];
						if ($months > 0) {
							// ---------- charged $77 --------
							$pid = 0;	// Payment Transaction ID
							make_monthly_payment($user, 44, $pid); //$77
							// decrease months
							$months -= 1;
							$query2 = db_query("UPDATE member_id_pool SET signup_fee_type=".$months." WHERE member_id=:a",
                            array(":a"=>$user->profile_memberid));
							$result2 = $query2;
							
						}
					}
					
					
					// 
					$query2 = db_query("UPDATE member_id_pool SET next_payment_date=".$new_next_payment_date." WHERE member_id=:a",
                        array(":a"=>$user->profile_memberid));
					$result2 = $query2;
					
					if ($user->status==0 && $user->profile_fblocked != 'first') {
						continue;
					}
					
					// For Gold Member ,Gold Lite Member, Coach on Call Member, Gold Coach
					if ($member_type == 0 || $member_type == 2 || $member_type == 3 || $member_type == 4) {
						// standard monthly fee
						
						// Prevent from charging user for monthly recurring fee.
						$monthly_fee_free = false;
						if (ncn_admin_is_member_first_free($user->profile_memberid)) {
							if (  ncn_admin_member_first_free_month_passed($user->profile_memberid) == FALSE  ) {
								$monthly_fee_free = true;
							}
						}
						
						if ($monthly_fee_free) {
							ncn_admin_set_member_first_free_month($user->profile_memberid, date('U'));
							//make_monthly_payment($user, 85);	//$0 monthly
						} else {
							
						}
						
						$mmf_product_nid = 32;
						if ( $member_type == 0 ) {
							$mmf_product_nid = 32;		// $99		(MMF)
						} else if ( $member_type == 2 ) {
							$mmf_product_nid = 102;		// $24.95	(MMF-GL)
						} else if ( $member_type == 3 ) {
							$mmf_product_nid = 119;		// $39.95	(MMF-COC)
						} else if ( $member_type == 4 ) {
							$mmf_product_nid = 137;		// $138.95	(MMF-GC)
						}
						$pid = 0;	// Payment Transaction ID
						make_monthly_payment($user, $mmf_product_nid, $pid);	
					}
				}
				
			}
		}		
	} 
	
	///////////////////////////////////////////////////////////////////
	// Unactivated Member
	$query = "SELECT * FROM member_id_pool WHERE used=0 AND status=1";
	$result = db_query($query);
	$member_count = $result->rowCount();
	//for ($i=0; $i<$member_count; $i++)
    foreach($result as $member)
	{
		//$member = $result->fetchAssoc();
        $member = (array)$member;
		
		if ($member['create'] == 0) { continue; }
		
		$next_payment_date = $member['next_payment_date'];
			
		$create_time = $member['create'];
		
		// check for payment never made
		if ($next_payment_date == 0)
		{
			$next_payment_date = calculate_next_month($create_time, ncn_user_get_member_renewal_day($member['member_id']));
			
			$query2 = db_query("UPDATE member_id_pool SET next_payment_date=".$next_payment_date." WHERE member_id=:a",
                array(":a"=>$member['member_id']));
			$result2 = $query2;
		}
		
		// do we need to pay yet?
		if ($next_payment_date <= date('U') )
		{
			
			// calculate the next payment date (FROM CREATION DATE)
			$new_next_payment_date = calculate_next_month($next_payment_date, ncn_user_get_member_renewal_day($member['member_id']));
			
			// singup monthly fee for 3 months
			
			$months = $member['signup_fee_type'];
			if ($months > 0) {
				// ---------- charged $77 --------
				$pid = 0;	// Payment Transaction ID
				make_monthly_payment_from_memberid($member['member_id'], 44, $pid); //$77
				// decrease months
				$months -= 1;
				$query2 = db_query("UPDATE member_id_pool SET signup_fee_type=".$months." WHERE member_id=:a",
                array(":a"=>$member['member_id']));
				$result2 = $query2;
			}
			
			
			$query2 = db_query("UPDATE member_id_pool SET next_payment_date=".$new_next_payment_date." WHERE member_id=:a",
                array(":a"=>$member['member_id']));
			$result2 = $query2;
			if ($member['status'] == 0) {
				continue;
			}
			
			// For Gold Member
			if ($member['member_type'] == 0 || $member['member_type'] == 2 || $member['member_type'] == 3 || $member['member_type'] == 4) {
				// standard monthly fee
				
				// Prevent from charging user for monthly recurring fee.
				$monthly_fee_free = false;
				if (ncn_admin_is_member_first_free($member['member_id'])) {
					if (  ncn_admin_member_first_free_month_passed($member['member_id']) == FALSE  ) {
						$monthly_fee_free = true;
					}
				}
				if ($monthly_fee_free) {
					ncn_admin_set_member_first_free_month($member['member_id'], date('U'));
					//make_monthly_payment_from_memberid($member['member_id'], 85);	//$0 monthly
				} else {		
					
				}
				
				$mmf_product_nid = 32;
				if ( $member['member_type'] == 0 ) {
					$mmf_product_nid = 32;		// $99		(MMF)
				} else if ( $member['member_type'] == 2 ) {
					$mmf_product_nid = 102;		// $24.95	(MMF-GL)
				} else if ( $member['member_type'] == 3 ) {
					$mmf_product_nid = 119;		// $39.95	(MMF-COC)
				} else if ( $member['member_type'] == 4 ) {
					$mmf_product_nid = 137;		// $138.95	(MMF-GC)
				}
				
				$pid = 0;	// Payment Transaction ID
				make_monthly_payment_from_memberid($member['member_id'], $mmf_product_nid, $pid);
			}
		}
	}
	
	
	// Send Test Mail	
	//drupal_mail('ncn_admin', 'cronmail', 'keyideas.admn@gmail.com', language_default() , array('!date' => date('Y-m-d H:i A T'),'!crontype' => 'ncn_auto_payments_cron'));
	
	// check to see if we need to notify admin of payment errors
	if ($auto_payment_messages != '')
	{
		drupal_mail('ncn_auto_payments', 'message', variable_get('site_mail', ''), language_default());
		drupal_mail('ncn_auto_payments', 'message', "rayjakes@idesolutions.co.uk", language_default());
		drupal_mail('ncn_auto_payments', 'message', "elight.haha@gmail.com", language_default());
	}

}

//------------------------------------------------------------------------------
function make_monthly_payment($user, $product_nid, &$pid, $mode="standard")
{
	GLOBAL $auto_payment_messages;

	set_time_limit(119);
	
	/*if($_SERVER['REMOTE_ADDR']=='103.240.34.101')
	{
		echo date("Y-m-d H:i A T",$next_payment_date)." <= ".date("Y-m-d H:i A T :: ");
		echo " => ".$next_payment_date." <= ".date('U');
		echo " => ".$product_nid." => ".$pid;
		exit;
	}*/
	
	
	// check for free user
	if ($user->profile_credit_card_number == "5424000000000015")
	{
		$message = "WARNING: Ignoring monthly membership fee for '".$user->name."' (".$user->mail.") because user is FREE.";
		watchdog('cron', $message);
		return;
	}

	// get payment profile information
	$query = db_query('SELECT * FROM member_cim WHERE member_id=:a',array(":a"=>$user->profile_memberid));
	$result = $query;
	$row_count = $result->rowCount();
	
	if ($row_count == 0)
	{
		$message = "ERROR: Failed to charge monthly membership fee for '".$user->name."' (".$user->mail.") because no practicepay profile found.";
		$auto_payment_messages .= $message."\n\n";
		watchdog('cron', $message);
	}
	
	$row = $query->fetchAssoc();
	
	if (intval($row['customerProfileId']) == 0 || intval($row['customerPaymentProfileId']) == 0) {
		$message = "WARNING: Ignoring monthly membership fee for '".$user->name."' (".$user->mail.") because user is FREE.";
		watchdog('cron', $message);
		return;
	}
	
	$customerProfileId = $row['customerProfileId'];
	$customerPaymentProfileId = $row['customerPaymentProfileId'];

	// build xml query
	//$node = node_load(32);
	$node = node_load($product_nid);
	$node->data = unserialize($node->data);
	
	if ($node->sell_price != 0) {
	$title = (string)$node->title;
//	$title .= " for ".$user->profile_firstname." ".$user->profile_lastname." (".$user->profile_legalname.")";

		// attempt payment
		$content =
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>" .
			"<createCustomerProfileTransactionRequest xmlns=\"AnetApi/xml/v1/schema/AnetApiSchema.xsd\">" .
			MerchantAuthenticationBlock().
			"<transaction>".
			"<profileTransAuthCapture>".
			"<amount>" . (string)$node->sell_price . "</amount>". // should include tax, shipping, and everything.
			"<shipping>".
			"<amount>0.00</amount>".
			"<name>".$title."</name>".
			"<description>".$title."</description>".
			"</shipping>".

			"<lineItems>".
			"<itemId>123456</itemId>".
			"<name>".$title."</name>".
			"<description>".$title."</description>".
			"<quantity>1</quantity>".
			"<unitPrice>".(string)$node->sell_price."</unitPrice>".
			"<taxable>false</taxable>".
			"</lineItems>".

			"<customerProfileId>" . $customerProfileId . "</customerProfileId>".
			"<customerPaymentProfileId>" . $customerPaymentProfileId . "</customerPaymentProfileId>".
			"<order>".
			"<invoiceNumber>".get_unique_auth_profile_id()."</invoiceNumber>".
			"</order>".
			"</profileTransAuthCapture>".
			"</transaction>".
			"</createCustomerProfileTransactionRequest>";	// <?php

	
		$response = send_xml_request($content);
		$parsedresponse = parse_api_response($response);
		
		$auth_successful = true;
		if ("Ok" == $parsedresponse->messages->resultCode)
		{
			$auth_successful = true;
//			echo "success: ".$user->name."<br>";
		}
		else
		{
			
			$auth_successful = false;
			
			$response_reason_text = preg_replace("/[^a-zA-Z0-9\s]/", "", $parsedresponse->messages->message->text);
			
			$params = array(
				'member_name' => $user->profile_firstname." ".$user->profile_lastname,
				'activation' => true
			);
			if ( strcasecmp($response_reason_text, 'This transaction has been declined') == 0 ) {
				if ( $mode=="standard" ) {
					$message = credit_card_declined_mail_template($params);
					drupal_mail('ncn_auto_payments', 'credit_card_declined', $user->mail, language_default(), array('subject'=>t('Credit Card Declined'), 'body'=>$message));
				} else {
					$message = "ERROR: ".$response_reason_text;
					$auto_payment_messages .= $message."\n\n";
				}
				
			} else if ( strcasecmp($response_reason_text, 'The credit card has expired.') == 0 ) {
				if ( $mode=="standard" ) {
					$message = credit_card_expired_mail_template($params);
					drupal_mail('ncn_auto_payments', 'credit_card_expired', $user->mail, language_default(), array('subject'=>t('Credit Card Expired'), 'body'=>$message));
				} else {
					$message = "ERROR: ".$response_reason_text;
					$auto_payment_messages .= $message."\n\n";
				}
			} else {
				$message = "ERROR: Attempted to charge monthly membership fee for '".$user->profile_firstname." ".$user->profile_lastname."' (".$user->mail.") failed because ".$response_reason_text;
				$auto_payment_messages .= $message."\n\n";
			}
			//watchdog('cron', $message);
			
			if ( $mode=="standard" ) {
				// Log to Declined Report
				ncn_auto_payments_insert_declined_transaction($product_nid, $user->uid, '0', date('U'));
			}
		}
	} else {
		$auth_successful = true;
	}
	//*** payment log ***//
	$payment_success = ($auth_successful)? 1:0;
	$pid = ncn_report_payment_log($product_nid, $payment_success, $user);
	
	return $payment_success;
}

function make_monthly_payment_from_memberid($member_id, $product_nid, &$pid, $mode="standard")
{
GLOBAL $auto_payment_messages;

	set_time_limit(119);

	$query = db_query("SELECT * FROM member_id_pool WHERE member_id=:a",array(":a"=>$member_id));
	$result = $query;
	if ( $result->rowCount() == 0 ) {
		return;
	}
	$member = $result->fetchAssoc();
	
	//watchdog('cron_log', '!member_id', array('!member_id'=>$member_id));
	// get payment profile information
	$query = db_query("SELECT * FROM member_cim WHERE member_id=:a",array(":a"=>$member_id));
	$result = $query;
	$row_count = $result->rowCount();
	
	if ($row_count == 0)
	{
		$message = "ERROR: Failed to charge monthly membership fee for '".$member['first_name'].' '.$member['last_name']."' (".$member['contactemail'].") because no practicepay profile found.";
		$auto_payment_messages .= $message."\n\n";
		watchdog('cron', $message);
	}
	
	$row = $result->fetchAssoc();
	
	if (intval($row['customerProfileId']) == 0 || intval($row['customerPaymentProfileId']) == 0) {
		$message = "WARNING: Ignoring monthly membership fee for '".$member['first_name'].' '.$member['last_name']."' (".$member['contactemail'].") because user is FREE.";
		watchdog('cron', $message);
		return;
	}
	
	$customerProfileId = $row['customerProfileId'];
	$customerPaymentProfileId = $row['customerPaymentProfileId'];
	//watchdog('cron_log', 'customerProfileId: !customerProfileId, customerPaymentProfileId: !customerPaymentProfileId', array('!customerProfileId'=>$customerProfileId, '!customerPaymentProfileId'=>$customerPaymentProfileId));
	// build xml query
	//$node = node_load(32);
	$node = node_load($product_nid);
	$node->data = unserialize($node->data);

	if ($node->sell_price != 0) {
		$title = (string)$node->title;
	//	$title .= " for ".$user->profile_firstname." ".$user->profile_lastname." (".$user->profile_legalname.")";

			// attempt payment
			$content =
				"<?xml version=\"1.0\" encoding=\"utf-8\"?>" .
				"<createCustomerProfileTransactionRequest xmlns=\"AnetApi/xml/v1/schema/AnetApiSchema.xsd\">" .
				MerchantAuthenticationBlock().
				"<transaction>".
				"<profileTransAuthCapture>".
				"<amount>" . (string)$node->sell_price . "</amount>". // should include tax, shipping, and everything.
				"<shipping>".
				"<amount>0.00</amount>".
				"<name>".$title."</name>".
				"<description>".$title."</description>".
				"</shipping>".

				"<lineItems>".
				"<itemId>123456</itemId>".
				"<name>".$title."</name>".
				"<description>".$title."</description>".
				"<quantity>1</quantity>".
				"<unitPrice>".(string)$node->sell_price."</unitPrice>".
				"<taxable>false</taxable>".
				"</lineItems>".

				"<customerProfileId>" . $customerProfileId . "</customerProfileId>".
				"<customerPaymentProfileId>" . $customerPaymentProfileId . "</customerPaymentProfileId>".
				"<order>".
				"<invoiceNumber>".get_unique_auth_profile_id()."</invoiceNumber>".
				"</order>".
				"</profileTransAuthCapture>".
				"</transaction>".
				"</createCustomerProfileTransactionRequest>";	// <?php

		
			$response = send_xml_request($content);
			$parsedresponse = parse_api_response($response);
			
			$auth_successful = true;
			if ("Ok" == $parsedresponse->messages->resultCode)
			{
				$auth_successful = true;
	//			echo "success: ".$user->name."<br>";
			}
			else
			{
				
				$auth_successful = false;
				
				$response_reason_text = preg_replace("/[^a-zA-Z0-9\s]/", "", $parsedresponse->messages->message->text);
				
				$params = array(
					'member_name' => $member['first_name'].' '.$member['last_name'],
					'activation' => false
				);
				if ( strcasecmp($response_reason_text, 'This transaction has been declined') == 0 ) {
					if ( $mode=="standard" ) {
						$message = credit_card_declined_mail_template($params);
						drupal_mail('ncn_auto_payments', 'credit_card_declined', $member['contactemail'], language_default(), array('subject'=>t('Credit Card Declined'), 'body'=>$message));
					} else {
						$message = "ERROR: ".$response_reason_text;
						$auto_payment_messages .= $message."\n\n";
					}
					
				} else if ( strcasecmp($response_reason_text, 'The credit card has expired.') == 0 ) {
					if ( $mode=="standard" ) {
						$message = credit_card_expired_mail_template($params);
						drupal_mail('ncn_auto_payments', 'credit_card_expired', $member['contactemail'], language_default(), array('subject'=>t('Credit Card Expired'), 'body'=>$message));
					} else {
						$message = "ERROR: ".$response_reason_text;
						$auto_payment_messages .= $message."\n\n";
					}
				} else {
					$message = "ERROR: Attempted to charge monthly membership fee for '".$member['first_name'].' '.$member['last_name']."' (".$member['contactemail'].") failed because ".$response_reason_text;
					$auto_payment_messages .= $message."\n\n";
				}
				//watchdog('cron', $message);
				if ( $mode=="standard" ) {
					// Log to Declined Report
					ncn_auto_payments_insert_declined_transaction($product_nid, 0, $member_id, date('U'));
				}
			}
	} else {
		$auth_successful = true;
	}	
	//*** payment log ***//
	$payment_success = ($auth_successful)? 1:0;
	$pid = ncn_report_payment_log($product_nid, $payment_success, null, $member_id);
	
	return $payment_success;
}

//------------------------------------------------------------------------------
// calculated when the next month is
function calculate_next_month($last, $charge_day)
{
	$last_d = getdate($last);
	$y = $last_d['year'];
	$m = $last_d['month'];
	$last_d_first = strtotime("1 $m $y");
	$next_month = strtotime('+1 month', $last_d_first);
	
	$next_d = getdate($next_month);
	$y = $next_d['year'];
	$m = $next_d['month'];
	$d = $charge_day;
	if ( $d > date('t', $next_month)) {
		$d = date('t', $next_month);
	}
	
	$next_payment = strtotime("$d $m $y");
	if ($next_payment<date('U')) {
		return calculate_next_month($next_payment, $charge_day);
	}
	return strtotime("$d $m $y");
}

//------------------------------------------------------------------------------
/**
 * Call this function at the first day of every month
 */
function ncn_auto_payments_check_expiration() {
	$result = db_query("SELECT * FROM {users} WHERE uid!=69");
//	while ($u = db_fetch_array($result))
    foreach($result as $u)
    {
        $u = (array)$u;
		$_user = user_load($u['uid']);
		if (!(isset($_user->profile_memberid)&&is_member($_user->profile_memberid))) { continue; }
		if ($u['status'] == 0 && $_user->profile_fblocked != 'first') {
			continue;	// blocked
		}
		$customerProfileId = 0; $customerPaymentProfileId = 0;
		ncn_auto_payments_get_member_cim($_user->profile_memberid, $customerProfileId, $customerPaymentProfileId);
		
		$expired = ncn_auto_payments_get_cc_expiration($customerProfileId, $customerPaymentProfileId);
		if ($expired) {
			$params = array(
				'member_name' => $_user->profile_firstname." ".$_user->profile_lastname,
				'activation' => true
			);
			$message = credit_card_expired_mail_template($params);
			drupal_mail('ncn_auto_payments', 'credit_card_expired', $_user->mail, language_default(), array('subject'=>t('Credit Card Expired'), 'body'=>$message));
			
			//print( $_user->profile_firstname." ".$_user->profile_lastname."(".$_user->profile_memberid.") : ");
			//print( $customerProfileId . " - " . $customerPaymentProfileId);
		}
		
		
	}
	
	$result = db_query("SELECT * FROM {member_id_pool} WHERE used=0 AND status=1");
//	while ($m = db_fetch_array($result))
    foreach($result as $m)
    {
        $m = (array)$m;
		$customerProfileId = 0; $customerPaymentProfileId = 0;
		ncn_auto_payments_get_member_cim($m['member_id'], $customerProfileId, $customerPaymentProfileId);
		
		$expired = ncn_auto_payments_get_cc_expiration($customerProfileId, $customerPaymentProfileId);
		if ($expired) {
			$params = array(
				'member_name' => $m['first_name'].' '.$m['last_name'],
				'activation' => false
			);
			$message = credit_card_expired_mail_template($params);
			drupal_mail('ncn_auto_payments', 'credit_card_expired', $m['contactemail'], language_default(), array('subject'=>t('Credit Card Expired'), 'body'=>$message));
			
			//print( $m['first_name'].' '.$m['last_name']."(".$m['member_id'].") : ");
			//print( $customerProfileId . " - " . $customerPaymentProfileId);
		}
	}
}

function ncn_auto_payments_get_member_cim($member_id, &$customerProfileId, &$customerPaymentProfileId) {
	$customerProfileId = 0;
	$customerPaymentProfileId = 0;
	
	$result = db_query("SELECT * FROM {member_cim} WHERE member_id=:d",array(":d"=>$member_id));
	if ($row = $result->fetchAssoc()) {
		$customerProfileId = intval($row['customerProfileId']);
		$customerPaymentProfileId = intval($row['customerPaymentProfileId']);
	}
	return;
}

// using expiration date , but it is impossible to get expirationDate via API, because this is masked.

/*function ncn_auto_payments_get_cc_expiration($customerProfileId, $customerPaymentProfileId) {
	$payment_profile = ncn_pp_getCustomerPaymentProfileRequest($customerProfileId, $customerPaymentProfileId);
	if ($payment_profile != null) {
		list($year, $month) = split("-", $payment_profile->payment->creditCard->expirationDate);
		echo "<pre>";
		print_r ($payment_profile);
		echo "</pre>";
		exit;
		$year = intval($year);
		$month = intval($month);
		$expiration = mktime(0, 0, 0, $month, 1, $year);
		
		return $expiration;
	}
	return 0;
}*/

function ncn_auto_payments_get_cc_expiration($customerProfileId, $customerPaymentProfileId) {
	set_time_limit(59);
	$content =
		"<?xml version=\"1.0\" encoding=\"utf-8\"?>" .
		"<validateCustomerPaymentProfileRequest xmlns=\"AnetApi/xml/v1/schema/AnetApiSchema.xsd\"> ". 
		MerchantAuthenticationBlock(). 
		"<customerProfileId>$customerProfileId</customerProfileId>". 
		"<customerPaymentProfileId>$customerPaymentProfileId</customerPaymentProfileId>". 
		"<validationMode>liveMode</validationMode>".
		"</validateCustomerPaymentProfileRequest>";
		
	$response = send_xml_request($content);
	$parsedresponse = parse_api_response($response);
	
	if ( strcasecmp($parsedresponse->messages->message->text, 'The credit card has expired.') == 0 ) {
		return true;
	}
	return false;
	
}

function ncn_pp_getCustomerPaymentProfileRequest($customerProfileId, $customerPaymentProfileId) {
	set_time_limit(59);
	
	$content =
		"<?xml version=\"1.0\" encoding=\"utf-8\"?>" .
		"<getCustomerPaymentProfileRequest xmlns=\"AnetApi/xml/v1/schema/AnetApiSchema.xsd\"> ". 
		MerchantAuthenticationBlock(). 
		"<customerProfileId>$customerProfileId</customerProfileId>". 
		"<customerPaymentProfileId>$customerPaymentProfileId</customerPaymentProfileId>". 
		"</getCustomerPaymentProfileRequest>";
		
	$response = send_xml_request($content);
	$parsedresponse = parse_api_response($response);
		
	$auth_successful = true;
	if ("Ok" == $parsedresponse->messages->resultCode)
	{
		return $parsedresponse->paymentProfile;
	}
	return NULL;
}


function make_payment($user, $product_nid, $price, &$pid, $mode="standard")
{
GLOBAL $auto_payment_messages;

	set_time_limit(119);

	// check for free user
	if ($user->profile_credit_card_number == "5424000000000015")
	{
		$message = "WARNING: Ignoring payment for '".$user->name."' (".$user->mail.") because user is FREE.";
		watchdog('cron', $message);
		return 'FREE';
	}

	// get payment profile information
	$query = db_query("SELECT * FROM member_cim WHERE member_id=:a",array(":a"=>$user->profile_memberid));
	$result = $query;
	$row_count = $result->rowCount();
	
	if ($row_count == 0)
	{
		$message = "ERROR: Failed to charge for '".$user->name."' (".$user->mail.") because no practicepay profile found.";
		$auto_payment_messages .= $message."\n\n";
		watchdog('cron', $message);
		return FALSE;
	}
	
	$row = $result->fetchAssoc();
	
	if (intval($row['customerProfileId']) == 0 || intval($row['customerPaymentProfileId']) == 0) {
		$message = "WARNING: Ignoring payment for '".$user->name."' (".$user->mail.") because user is FREE.";
		watchdog('cron', $message);
		return FALSE;
	}
	
	$customerProfileId = $row['customerProfileId'];
	$customerPaymentProfileId = $row['customerPaymentProfileId'];

	// build xml query
	//$node = node_load(32);
	$node = node_load($product_nid);
	if ($node) {
		$node->data = unserialize($node->data);
		if ($price == 0) {
			$price = $node->sell_price;
		}
	}
	
	if ($price != 0) {
		$title = (string)$node->title;
		
		// attempt payment
		$content =
			"<?xml version=\"1.0\" encoding=\"utf-8\"?>" .
			"<createCustomerProfileTransactionRequest xmlns=\"AnetApi/xml/v1/schema/AnetApiSchema.xsd\">" .
			MerchantAuthenticationBlock().
			"<transaction>".
			"<profileTransAuthCapture>".
			"<amount>" . (string)$price . "</amount>". // should include tax, shipping, and everything.
			"<shipping>".
			"<amount>0.00</amount>".
			"<name>".$title."</name>".
			"<description>".$title."</description>".
			"</shipping>".

			"<lineItems>".
			"<itemId>123456</itemId>".
			"<name>".$title."</name>".
			"<description>".$title."</description>".
			"<quantity>1</quantity>".
			"<unitPrice>".(string)$price."</unitPrice>".
			"<taxable>false</taxable>".
			"</lineItems>".

			"<customerProfileId>" . $customerProfileId . "</customerProfileId>".
			"<customerPaymentProfileId>" . $customerPaymentProfileId . "</customerPaymentProfileId>".
			"<order>".
			"<invoiceNumber>".get_unique_auth_profile_id()."</invoiceNumber>".
			"</order>".
			"</profileTransAuthCapture>".
			"</transaction>".
			"</createCustomerProfileTransactionRequest>";	// <?php

	
		$response = send_xml_request($content);
		$parsedresponse = parse_api_response($response);
		
		$auth_successful = true;
		if ("Ok" == $parsedresponse->messages->resultCode)
		{
			$auth_successful = true;
		}
		else
		{
			
			$auth_successful = false;
			
			$response_reason_text = preg_replace("/[^a-zA-Z0-9\s]/", "", $parsedresponse->messages->message->text);
			
			$params = array(
				'member_name' => $user->profile_firstname." ".$user->profile_lastname,
				'activation' => true
			);
			if ( strcasecmp($response_reason_text, 'This transaction has been declined') == 0 ) {
				if ( $mode=="standard" ) {
					$message = credit_card_declined_mail_template($params);
					drupal_mail('ncn_auto_payments', 'credit_card_declined', $user->mail, language_default(), array('subject'=>t('Credit Card Declined'), 'body'=>$message));
					
					// Log to Declined Report
					if ($product_nid) {
						ncn_auto_payments_insert_declined_transaction($product_nid, $user->uid, '0', date('U'), $price);
					}
				} else {
					$message = "ERROR: ".$response_reason_text;
					$auto_payment_messages .= $message."\n\n";
				}
				
			} else if ( strcasecmp($response_reason_text, 'The credit card has expired.') == 0 ) {
				if ( $mode=="standard" ) {
					$message = credit_card_expired_mail_template($params);
					drupal_mail('ncn_auto_payments', 'credit_card_expired', $user->mail, language_default(), array('subject'=>t('Credit Card Expired'), 'body'=>$message));
				} else {
					$message = "ERROR: ".$response_reason_text;
					$auto_payment_messages .= $message."\n\n";
				}
			} else {
				$message = "ERROR: Attempted to charge for '".$user->profile_firstname." ".$user->profile_lastname."' (".$user->mail.") failed because ".$response_reason_text;
				$auto_payment_messages .= $message."\n\n";
			}

		}
	} else {
		$auth_successful = true;
	}
	//*** payment log ***//
	$payment_success = ($auth_successful)? 1:0;
	$pid = ncn_report_payment_log($product_nid, $payment_success, $user, 0, 0, 0, 0, $price);
	
	
	return ($payment_success)? TRUE:FALSE;
}

function make_payment_from_memberid($member_id, $product_nid, $price, &$pid, $mode="standard")
{
GLOBAL $auto_payment_messages;

	set_time_limit(119);

	$query = db_query("SELECT * FROM member_id_pool WHERE member_id=:a",array(":a"=>$member_id));
	$result = $query;
	if ($result->rowCount() == 0 ) {
		return FALSE;
	}
	$member = $result->fetchAssoc();
	
	//watchdog('cron_log', '!member_id', array('!member_id'=>$member_id));
	// get payment profile information
	$query = db_query("SELECT * FROM member_cim WHERE member_id=:a",array(":a"=>$member_id));
	$result = $query;
	$row_count = $result->rowCount();
	
	if ($row_count == 0)
	{
		$message = "ERROR: Failed to charge monthly membership fee for '".$member['first_name'].' '.$member['last_name']."' (".$member['contactemail'].") because no practicepay profile found.";
		$auto_payment_messages .= $message."\n\n";
		watchdog('cron', $message);
	}
	
	$row = $result->fetchAssoc();
	
	if (intval($row['customerProfileId']) == 0 || intval($row['customerPaymentProfileId']) == 0) {
		$message = "WARNING: Ignoring monthly membership fee for '".$member['first_name'].' '.$member['last_name']."' (".$member['contactemail'].") because user is FREE.";
		watchdog('cron', $message);
		return FALSE;
	}
	
	$customerProfileId = $row['customerProfileId'];
	$customerPaymentProfileId = $row['customerPaymentProfileId'];
	//watchdog('cron_log', 'customerProfileId: !customerProfileId, customerPaymentProfileId: !customerPaymentProfileId', array('!customerProfileId'=>$customerProfileId, '!customerPaymentProfileId'=>$customerPaymentProfileId));
	// build xml query
	//$node = node_load(32);
	$node = node_load($product_nid);
	if ($node) {
		$node->data = unserialize($node->data);
		if ($price == 0) {
			$price = $node->sell_price;
		}
	}

	if ($price != 0) {
		$title = (string)$node->title;
	//	$title .= " for ".$user->profile_firstname." ".$user->profile_lastname." (".$user->profile_legalname.")";

			// attempt payment
			$content =
				"<?xml version=\"1.0\" encoding=\"utf-8\"?>" .
				"<createCustomerProfileTransactionRequest xmlns=\"AnetApi/xml/v1/schema/AnetApiSchema.xsd\">" .
				MerchantAuthenticationBlock().
				"<transaction>".
				"<profileTransAuthCapture>".
				"<amount>" . (string)$price . "</amount>". // should include tax, shipping, and everything.
				"<shipping>".
				"<amount>0.00</amount>".
				"<name>".$title."</name>".
				"<description>".$title."</description>".
				"</shipping>".

				"<lineItems>".
				"<itemId>123456</itemId>".
				"<name>".$title."</name>".
				"<description>".$title."</description>".
				"<quantity>1</quantity>".
				"<unitPrice>".(string)$price."</unitPrice>".
				"<taxable>false</taxable>".
				"</lineItems>".

				"<customerProfileId>" . $customerProfileId . "</customerProfileId>".
				"<customerPaymentProfileId>" . $customerPaymentProfileId . "</customerPaymentProfileId>".
				"<order>".
				"<invoiceNumber>".get_unique_auth_profile_id()."</invoiceNumber>".
				"</order>".
				"</profileTransAuthCapture>".
				"</transaction>".
				"</createCustomerProfileTransactionRequest>";	// <?php

		
			$response = send_xml_request($content);
			$parsedresponse = parse_api_response($response);
			
			$auth_successful = true;
			if ("Ok" == $parsedresponse->messages->resultCode)
			{
				$auth_successful = true;
			}
			else
			{
				
				$auth_successful = false;
				
				$response_reason_text = preg_replace("/[^a-zA-Z0-9\s]/", "", $parsedresponse->messages->message->text);
				
				$params = array(
					'member_name' => $member['first_name'].' '.$member['last_name'],
					'activation' => false
				);
				if ( strcasecmp($response_reason_text, 'This transaction has been declined') == 0 ) {
					if ( $mode=="standard" ) {
						$message = credit_card_declined_mail_template($params);
						drupal_mail('ncn_auto_payments', 'credit_card_declined', $member['contactemail'], language_default(), array('subject'=>t('Credit Card Declined'), 'body'=>$message));
						
						// Log to Declined Report
						if ($product_nid) {
							ncn_auto_payments_insert_declined_transaction($product_nid, 0, $member_id, date('U'), $price);
						}
					} else {
						$message = "ERROR: ".$response_reason_text;
						$auto_payment_messages .= $message."\n\n";
					}
					
				} else if ( strcasecmp($response_reason_text, 'The credit card has expired.') == 0 ) {
					if ( $mode=="standard" ) {
						$message = credit_card_expired_mail_template($params);
						drupal_mail('ncn_auto_payments', 'credit_card_expired', $member['contactemail'], language_default(), array('subject'=>t('Credit Card Expired'), 'body'=>$message));
					} else {
						$message = "ERROR: ".$response_reason_text;
						$auto_payment_messages .= $message."\n\n";
					}
				} else {
					$message = "ERROR: Attempted to charge for '".$member['first_name'].' '.$member['last_name']."' (".$member['contactemail'].") failed because ".$response_reason_text;
					$auto_payment_messages .= $message."\n\n";
				}
				//watchdog('cron', $message);

			}
	} else {
		$auth_successful = true;
	}	
	//*** payment log ***//
	$payment_success = ($auth_successful)? 1:0;
	$pid = ncn_report_payment_log($product_nid, $payment_success, null, $member_id, 0, 0, 0, $price);
	
	return ($payment_success)? TRUE:FALSE;
}
